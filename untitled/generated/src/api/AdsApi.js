/**
 * TradeByte API
 * Közösségi adok-veszek oldal API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdDto from '../model/AdDto';
import AdDtoPagedResult from '../model/AdDtoPagedResult';
import CreateAdDto from '../model/CreateAdDto';
import ProblemDetails from '../model/ProblemDetails';
import UpdateAdDto from '../model/UpdateAdDto';

/**
* Ads service.
* @module api/AdsApi
* @version v1
*/
export default class AdsApi {

    /**
    * Constructs a new AdsApi. 
    * @alias module:api/AdsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiAdsGet operation.
     * @callback module:api/AdsApi~apiAdsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdDtoPagedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [keyword] 
     * @param {Number} [categoryId] 
     * @param {Number} [page = 1)] 
     * @param {Number} [pageSize = 20)] 
     * @param {module:api/AdsApi~apiAdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdDtoPagedResult}
     */
    apiAdsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'keyword': opts['keyword'],
        'categoryId': opts['categoryId'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdDtoPagedResult;
      return this.apiClient.callApi(
        '/api/Ads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAdsIdDelete operation.
     * @callback module:api/AdsApi~apiAdsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AdsApi~apiAdsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAdsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAdsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Ads/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAdsIdGet operation.
     * @callback module:api/AdsApi~apiAdsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AdsApi~apiAdsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdDto}
     */
    apiAdsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAdsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdDto;
      return this.apiClient.callApi(
        '/api/Ads/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAdsIdPut operation.
     * @callback module:api/AdsApi~apiAdsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAdDto} [updateAdDto] 
     * @param {module:api/AdsApi~apiAdsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAdsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAdDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAdsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Ads/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAdsMineGet operation.
     * @callback module:api/AdsApi~apiAdsMineGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdDtoPagedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [pageSize = 20)] 
     * @param {module:api/AdsApi~apiAdsMineGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdDtoPagedResult}
     */
    apiAdsMineGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdDtoPagedResult;
      return this.apiClient.callApi(
        '/api/Ads/mine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAdsPost operation.
     * @callback module:api/AdsApi~apiAdsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAdDto} [createAdDto] 
     * @param {module:api/AdsApi~apiAdsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiAdsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createAdDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/Ads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
